parameters:
  - name: releaseName
    type: string
  - name: armServiceConnection
    type: string
    
steps:

- checkout: self

- task: Bash@3
  inputs:
    targetType: 'inline' # Optional. Options: filePath, inline
    #filePath: # Required when targetType == FilePath
    #arguments: # Optional
    script: |
      ls -al
    #workingDirectory: # Optional
    #failOnStderr: false # Optional
    #noProfile: true # Optional
    #noRc: true # Optional

- task: KubeloginInstaller@0
  inputs:
    kubeloginVersion: 'latest'

- task: HelmDeploy@0
  displayName: Helm lint - Elastic Search
  inputs:
    connectionType: Azure Resource Manager
    azureSubscriptionEndpoint: ${{ parameters.armServiceConnection }}
    azureResourceGroup: $(aksResourceGroupName)
    kubernetesCluster : $(aksClusterName)
    command: lint
    arguments: '$(Build.SourcesDirectory)/charts/elasticsearch'

- task: HelmDeploy@0
  displayName: 'Helm Deploy'
  condition: succeeded()
  inputs:
    connectionType: Azure Resource Manager
    azureSubscriptionEndpoint: ${{ parameters.armServiceConnection }}
    azureResourceGroup: $(aksResourceGroupName)
    kubernetesCluster : $(aksClusterName)
    releaseName: ${{ parameters.releaseName }}
    namespace: $(aksNamespace)
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: '$(Build.SourcesDirectory)/charts/elasticsearch'
    valueFile: $(Build.SourcesDirectory)/charts/elasticsearch/values.yaml
    overrideValues: |
      secret.password=$(elasticPassword)
      replicas=$(elasticReplicas)
      minimumMasterNodes=$(elasticMinMasterNodes)
      volumeClaimTemplate.storageClassName=$(elasticStorageClassName)
      antiAffinity=$(elasticAntiAffinity)
      ingress.hosts[0].host=$(elasticSearchIngressHostname)
      image=$(elasticImage)
      imageTag=$(elasticImageTag)
      storageClassBackup.storageClassName=$(backupStorageClassName) 
      storageClassBackup.pvcName=$(elasticBackupPvcName)
      storageClassBackup.storageAccountResourceGroup=$(storageAccountResourceGroup)
      storageClassBackup.storageAccountName=$(storageAccountName)
      storageClassBackup.server=$(storageAccountFilePrivateEndpointFqdn)
    install: true
    # force: true
    arguments: --debug
  
- task: HelmDeploy@0
  displayName: 'Helm Rollback'
  condition: failed()
  inputs:
    connectionType: Azure Resource Manager
    azureSubscriptionEndpoint: ${{ parameters.armServiceConnection }}
    azureResourceGroup: $(aksResourceGroupName)
    kubernetesCluster : $(aksClusterName)
    namespace: $(aksNamespace)
    command: 'rollback'
    arguments: ${{ parameters.releaseName }} --timeout=30m --debug